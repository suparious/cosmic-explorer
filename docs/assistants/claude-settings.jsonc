{
  "permissions": {
    "allow": [
      // ===== DOCKER COMMANDS =====
      // Basic Docker operations
      "Bash(docker ps)",
      "Bash(docker ps *)",
      "Bash(docker ps -a*)",
      "Bash(docker ps --format*)",
      "Bash(docker ps | grep*)",
      "Bash(docker ps -a | grep*)",
      
      // Docker logs
      "Bash(docker logs *)",
      "Bash(docker logs * --tail*)",
      "Bash(docker logs * --tail=*)",
      "Bash(docker logs * 2>&1*)",
      "Bash(docker logs * | grep*)",
      "Bash(docker logs * | tail*)",
      "Bash(docker logs * | head*)",
      
      // Docker exec
      "Bash(docker exec *)",
      "Bash(docker exec * printenv*)",
      "Bash(docker exec * cat *)",
      "Bash(docker exec * ls *)",
      "Bash(docker exec * rm *)",
      "Bash(docker exec * n8n *)",
      "Bash(docker exec * sh -c *)",
      "Bash(docker exec * bash -c *)",
      "Bash(docker exec * /bin/bash *)",
      "Bash(docker exec * /bin/sh *)",
      "Bash(docker exec * printenv | grep*)",
      
      // Docker container management
      "Bash(docker start *)",
      "Bash(docker stop *)",
      "Bash(docker restart *)",
      "Bash(docker rm *)",
      "Bash(docker rm -f *)",
      "Bash(docker kill *)",
      
      // Docker inspection
      "Bash(docker inspect *)",
      "Bash(docker inspect * | jq*)",
      "Bash(docker inspect * | grep*)",
      
      // Docker volumes
      "Bash(docker volume ls*)",
      "Bash(docker volume inspect *)",
      "Bash(docker volume rm *)",
      "Bash(docker volume create *)",
      "Bash(docker volume prune*)",
      
      // Docker images
      "Bash(docker images*)",
      "Bash(docker pull *)",
      "Bash(docker build *)",
      "Bash(docker build --no-cache *)",
      "Bash(docker tag *)",
      "Bash(docker push *)",
      
      // Docker compose
      "Bash(docker compose *)",
      "Bash(docker compose up*)",
      "Bash(docker compose up -d*)",
      "Bash(docker compose down*)",
      "Bash(docker compose ps*)",
      "Bash(docker compose logs*)",
      "Bash(docker compose restart*)",
      "Bash(docker compose stop*)",
      "Bash(docker compose start*)",
      "Bash(docker compose build*)",
      "Bash(docker compose pull*)",
      "Bash(docker compose exec*)",
      "Bash(docker compose rm*)",
      "Bash(docker compose up -d --force-recreate*)",
      "Bash(docker compose build --no-cache*)",
      "Bash(docker-compose *)",
      
      // Docker system
      "Bash(docker system *)",
      "Bash(docker info*)",
      "Bash(docker version*)",
      
      // ===== CONTAINER ORCHESTRATION =====
      // Kubernetes
      "Bash(kubectl *)",
      "Bash(kubectl get *)",
      "Bash(kubectl describe *)",
      "Bash(kubectl create *)",
      "Bash(kubectl apply *)",
      "Bash(kubectl delete *)",
      "Bash(kubectl exec *)",
      "Bash(kubectl logs *)",
      "Bash(kubectl port-forward *)",
      "Bash(kubectl cp *)",
      "Bash(kubectl scale *)",
      "Bash(kubectl rollout *)",
      "Bash(kubectl set *)",
      "Bash(kubectl edit *)",
      "Bash(kubectl patch *)",
      "Bash(kubectl label *)",
      "Bash(kubectl annotate *)",
      "Bash(kubectl expose *)",
      "Bash(kubectl run *)",
      "Bash(kubectl proxy*)",
      "Bash(kubectl config *)",
      "Bash(kubectl cluster-info*)",
      "Bash(kubectl top *)",
      "Bash(kubectl api-resources*)",
      "Bash(kubectl explain *)",
      "Bash(kubectl auth *)",
      "Bash(kubectl version*)",
      
      // Helm
      "Bash(helm *)",
      "Bash(helm install *)",
      "Bash(helm upgrade *)",
      "Bash(helm list*)",
      "Bash(helm repo *)",
      "Bash(helm search *)",
      "Bash(helm show *)",
      "Bash(helm pull *)",
      "Bash(helm delete *)",
      "Bash(helm rollback *)",
      "Bash(helm status *)",
      "Bash(helm test *)",
      "Bash(helm template *)",
      "Bash(helm dependency *)",
      "Bash(helm package *)",
      "Bash(helm lint *)",
      "Bash(helm create *)",
      
      // Minikube
      "Bash(minikube *)",
      "Bash(minikube start*)",
      "Bash(minikube stop*)",
      "Bash(minikube status*)",
      "Bash(minikube dashboard*)",
      "Bash(minikube service *)",
      "Bash(minikube tunnel*)",
      
      // Kind
      "Bash(kind *)",
      "Bash(kind create cluster*)",
      "Bash(kind delete cluster*)",
      "Bash(kind get clusters*)",
      "Bash(kind load docker-image *)",
      
      // ===== SSH COMMANDS =====
      "Bash(ssh gmktec-k9 *)",
      "Bash(ssh root@gmktec-k9 *)",
      "Bash(ssh gmktec-k9 \"*\")",
      "Bash(ssh root@gmktec-k9 \"*\")",
      "Bash(ssh gmktec-k9 '*')",
      "Bash(ssh root@gmktec-k9 '*')",
      "Bash(ssh * 'cd * && *')",
      "Bash(ssh * \"cd * && *\")",
      "Bash(ssh * \"bash -s\" << *)",
      "Bash(ssh * \"sudo *\")",
      
      // SCP and RSYNC
      "Bash(scp * root@gmktec-k9:*)",
      "Bash(scp root@gmktec-k9:* *)",
      "Bash(rsync *)",
      "Bash(rsync -avz *)",
      "Bash(rsync -avz --exclude=* *)",
      "Bash(rsync -avz --delete *)",
      
      // ===== GIT COMMANDS =====
      "Bash(git status*)",
      "Bash(git add *)",
      "Bash(git add .*)",
      "Bash(git add -A*)",
      "Bash(git add -u*)",
      "Bash(git commit -m *)",
      "Bash(git commit -am *)",
      "Bash(git commit --amend*)",
      "Bash(git push*)",
      "Bash(git push origin *)",
      "Bash(git push -u origin *)",
      "Bash(git pull*)",
      "Bash(git pull origin *)",
      "Bash(git fetch*)",
      "Bash(git fetch --all*)",
      "Bash(git log*)",
      "Bash(git log --oneline*)",
      "Bash(git log --graph*)",
      "Bash(git diff*)",
      "Bash(git diff --staged*)",
      "Bash(git diff HEAD*)",
      "Bash(git checkout *)",
      "Bash(git checkout -b *)",
      "Bash(git branch*)",
      "Bash(git branch -a*)",
      "Bash(git branch -d *)",
      "Bash(git branch -D *)",
      "Bash(git merge *)",
      "Bash(git rebase *)",
      "Bash(git stash*)",
      "Bash(git stash pop*)",
      "Bash(git stash list*)",
      "Bash(git remote *)",
      "Bash(git remote -v*)",
      "Bash(git remote add *)",
      "Bash(git remote set-url *)",
      "Bash(git config *)",
      "Bash(git reset *)",
      "Bash(git clean *)",
      "Bash(git tag *)",
      "Bash(git show *)",
      "Bash(git blame *)",
      "Bash(git clone *)",
      "Bash(git init*)",
      
      // ===== FILE OPERATIONS =====
      "Bash(ls*)",
      "Bash(ls -la*)",
      "Bash(ls -l*)",
      "Bash(ls -a*)",
      "Bash(ls -lh*)",
      "Bash(ls -la */)",
      "Bash(ll*)",
      "Bash(cat *)",
      "Bash(cat -n *)",
      "Bash(less *)",
      "Bash(more *)",
      "Bash(head *)",
      "Bash(head -n *)",
      "Bash(head -*)",
      "Bash(tail *)",
      "Bash(tail -n *)",
      "Bash(tail -*)",
      "Bash(tail -f *)",
      "Bash(grep *)",
      "Bash(grep -r *)",
      "Bash(grep -i *)",
      "Bash(grep -n *)",
      "Bash(grep -E *)",
      "Bash(grep -v *)",
      "Bash(grep -A* -B* *)",
      "Bash(egrep *)",
      "Bash(fgrep *)",
      "Bash(sed *)",
      "Bash(sed -i *)",
      "Bash(sed -n *)",
      "Bash(sed -e *)",
      "Bash(awk *)",
      "Bash(cut *)",
      "Bash(sort *)",
      "Bash(uniq *)",
      "Bash(wc *)",
      "Bash(wc -l *)",
      "Bash(find *)",
      "Bash(find . -name *)",
      "Bash(find . -type *)",
      "Bash(find . -path *)",
      "Bash(cp *)",
      "Bash(cp -r *)",
      "Bash(cp -a *)",
      "Bash(cp -p *)",
      "Bash(mv *)",
      "Bash(rm *)",
      "Bash(rm -f *)",
      "Bash(rm -r *)",
      "Bash(rm -rf *)",
      "Bash(mkdir *)",
      "Bash(mkdir -p *)",
      "Bash(rmdir *)",
      "Bash(touch *)",
      "Bash(chmod *)",
      "Bash(chown *)",
      "Bash(diff *)",
      "Bash(tree *)",
      "Bash(pwd*)",
      "Bash(cd *)",
      "Bash(cd * && *)",
      "Bash(pushd *)",
      "Bash(popd*)",
      "Bash(basename *)",
      "Bash(dirname *)",
      "Bash(realpath *)",
      "Bash(readlink *)",
      
      // ===== CURL COMMANDS =====
      "Bash(curl *)",
      "Bash(curl -s *)",
      "Bash(curl -S *)",
      "Bash(curl -f *)",
      "Bash(curl -L *)",
      "Bash(curl -o *)",
      "Bash(curl -O *)",
      "Bash(curl -X GET *)",
      "Bash(curl -X POST *)",
      "Bash(curl -X PUT *)",
      "Bash(curl -X DELETE *)",
      "Bash(curl -X PATCH *)",
      "Bash(curl -H \"*\" *)",
      "Bash(curl -H '*' *)",
      "Bash(curl -d *)",
      "Bash(curl --data *)",
      "Bash(curl --data-binary *)",
      "Bash(curl --header *)",
      "Bash(curl --request *)",
      "Bash(curl -u *)",
      "Bash(curl --user *)",
      "Bash(curl -w *)",
      "Bash(curl --write-out *)",
      "Bash(curl -v *)",
      "Bash(curl --verbose *)",
      "Bash(curl -k *)",
      "Bash(curl --insecure *)",
      "Bash(curl -i *)",
      "Bash(curl --include *)",
      "Bash(curl * | jq*)",
      "Bash(curl * | grep*)",
      "Bash(curl * | head*)",
      "Bash(curl * | tail*)",
      
      // ===== NPM AND NODE =====
      "Bash(npm *)",
      "Bash(npm install*)",
      "Bash(npm install --save*)",
      "Bash(npm install --save-dev*)",
      "Bash(npm install -g*)",
      "Bash(npm ci*)",
      "Bash(npm run *)",
      "Bash(npm test*)",
      "Bash(npm start*)",
      "Bash(npm build*)",
      "Bash(npm run build*)",
      "Bash(npm run test*)",
      "Bash(npm run dev*)",
      "Bash(npm run lint*)",
      "Bash(npm list*)",
      "Bash(npm update*)",
      "Bash(npm audit*)",
      "Bash(npm fund*)",
      "Bash(npm init*)",
      "Bash(npx *)",
      "Bash(node *)",
      "Bash(node -v*)",
      "Bash(node --version*)",
      "Bash(node -e *)",
      "Bash(node scripts/*)",
      "Bash(node *.js*)",
      
      // ===== PACKAGE MANAGERS & LANGUAGE TOOLS =====
      // Rust
      "Bash(cargo *)",
      "Bash(cargo build*)",
      "Bash(cargo run*)",
      "Bash(cargo test*)",
      "Bash(cargo check*)",
      "Bash(cargo fmt*)",
      "Bash(cargo clippy*)",
      "Bash(rustc *)",
      "Bash(rustup *)",
      
      // Go
      "Bash(go *)",
      "Bash(go build*)",
      "Bash(go run*)",
      "Bash(go test*)",
      "Bash(go get*)",
      "Bash(go mod*)",
      "Bash(go fmt*)",
      "Bash(go vet*)",
      
      // Ruby
      "Bash(gem *)",
      "Bash(gem install*)",
      "Bash(gem list*)",
      "Bash(bundle *)",
      "Bash(bundle install*)",
      "Bash(bundle exec*)",
      "Bash(ruby *)",
      "Bash(rake *)",
      
      // Java
      "Bash(java *)",
      "Bash(javac *)",
      "Bash(mvn *)",
      "Bash(mvn clean*)",
      "Bash(mvn install*)",
      "Bash(mvn test*)",
      "Bash(gradle *)",
      "Bash(gradle build*)",
      "Bash(gradle test*)",
      
      // PHP
      "Bash(php *)",
      "Bash(php -r *)",
      "Bash(php -v*)",
      "Bash(composer *)",
      "Bash(composer install*)",
      "Bash(composer update*)",
      "Bash(composer require*)",
      
      // Bun
      "Bash(bun *)",
      "Bash(bun install*)",
      "Bash(bun run*)",
      "Bash(bun test*)",
      "Bash(bun build*)",
      "Bash(bunx *)",
      
      // Deno
      "Bash(deno *)",
      "Bash(deno run*)",
      "Bash(deno test*)",
      "Bash(deno fmt*)",
      "Bash(deno lint*)",
      "Bash(deno compile*)",
      
      // ===== ENVIRONMENT VARIABLES =====
      "Bash(echo $*)",
      "Bash(echo \"$*\")",
      "Bash(echo '$*')",
      "Bash(echo *)",
      "Bash(export *)",
      "Bash(unset *)",
      "Bash(env*)",
      "Bash(env | grep*)",
      "Bash(printenv*)",
      "Bash(printenv | grep*)",
      "Bash(set*)",
      "Bash(source *)",
      "Bash(. *)",
      
      // With specific env vars from our session
      "Bash(STACK_MANAGER_* npm *)",
      "Bash(N8N_* npm *)",
      "Bash(POSTGRES_* npm *)",
      "Bash(NODE_ENV=* npm *)",
      
      // ===== JSON PROCESSING =====
      "Bash(jq *)",
      "Bash(jq .*)",
      "Bash(jq -r *)",
      "Bash(jq -c *)",
      "Bash(jq -s *)",
      "Bash(jq --tab*)",
      "Bash(* | jq)",
      "Bash(* | jq .)",
      "Bash(* | jq -r *)",
      "Bash(* | jq '.*')",
      "Bash(* | jq \".*\")",
      "Bash(* | jq '. | *')",
      "Bash(yq *)",
      "Bash(yq eval *)",
      "Bash(yq -i *)",
      "Bash(* | yq*)",
      
      // ===== PROCESS MANAGEMENT =====
      "Bash(ps *)",
      "Bash(ps aux*)",
      "Bash(ps -ef*)",
      "Bash(ps | grep*)",
      "Bash(pgrep *)",
      "Bash(kill *)",
      "Bash(kill -9 *)",
      "Bash(pkill *)",
      "Bash(killall *)",
      "Bash(jobs*)",
      "Bash(fg*)",
      "Bash(bg*)",
      "Bash(nohup *)",
      "Bash(sleep *)",
      "Bash(wait*)",
      
      // ===== SYSTEM COMMANDS =====
      "Bash(date*)",
      "Bash(date +*)",
      "Bash(whoami*)",
      "Bash(hostname*)",
      "Bash(uname *)",
      "Bash(which *)",
      "Bash(whereis *)",
      "Bash(id*)",
      "Bash(groups*)",
      "Bash(df *)",
      "Bash(du *)",
      "Bash(free*)",
      "Bash(top*)",
      "Bash(htop*)",
      "Bash(uptime*)",
      "Bash(w*)",
      "Bash(who*)",
      "Bash(last*)",
      "Bash(history*)",
      "Bash(alias*)",
      "Bash(type *)",
      
      // ===== NETWORK COMMANDS =====
      "Bash(ping *)",
      "Bash(netstat *)",
      "Bash(ss *)",
      "Bash(lsof *)",
      "Bash(lsof -i *)",
      "Bash(sudo lsof *)",
      "Bash(nslookup *)",
      "Bash(dig *)",
      "Bash(host *)",
      "Bash(wget *)",
      "Bash(nc -z *)",
      "Bash(telnet *)",
      "Bash(traceroute *)",
      "Bash(ip *)",
      "Bash(ifconfig*)",
      
      // ===== CONTROLLED SYSTEM ADMINISTRATION =====
      // Package Management with sudo
      "Bash(apt *)",
      "Bash(apt-get *)",
      "Bash(apt update*)",
      "Bash(apt install *)",
      "Bash(apt remove *)",
      "Bash(apt search *)",
      "Bash(apt list *)",
      "Bash(sudo apt *)",
      "Bash(sudo apt-get *)",
      "Bash(sudo apt update*)",
      "Bash(sudo apt install *)",
      "Bash(sudo apt upgrade*)",
      "Bash(sudo apt autoremove*)",
      "Bash(sudo apt autoclean*)",
      "Bash(dpkg *)",
      "Bash(dpkg -l*)",
      "Bash(dpkg -i *)",
      "Bash(sudo dpkg -i *)",
      "Bash(snap *)",
      "Bash(sudo snap install *)",
      "Bash(sudo snap remove *)",
      "Bash(brew *)",
      "Bash(brew install *)",
      "Bash(brew update*)",
      "Bash(brew upgrade*)",
      "Bash(brew list*)",
      "Bash(yum *)",
      "Bash(sudo yum install *)",
      "Bash(sudo yum update*)",
      "Bash(dnf *)",
      "Bash(sudo dnf install *)",
      "Bash(sudo dnf update*)",
      
      // ===== OPENSSL =====
      "Bash(openssl *)",
      "Bash(openssl rand *)",
      "Bash(openssl x509 *)",
      "Bash(openssl req *)",
      "Bash(openssl genrsa *)",
      
      // ===== GITHUB CLI =====
      "Bash(gh *)",
      "Bash(gh auth *)",
      "Bash(gh auth login*)",
      "Bash(gh auth status*)",
      "Bash(gh repo *)",
      "Bash(gh repo view*)",
      "Bash(gh repo list*)",
      "Bash(gh repo clone*)",
      "Bash(gh repo create*)",
      "Bash(gh pr *)",
      "Bash(gh pr create*)",
      "Bash(gh pr list*)",
      "Bash(gh pr view*)",
      "Bash(gh issue *)",
      "Bash(gh api *)",
      "Bash(gh workflow *)",
      "Bash(gh release *)",
      
      // ===== SCRIPT EXECUTION =====
      "Bash(bash *)",
      "Bash(sh *)",
      "Bash(./deploy-latest-updates.sh*)",
      "Bash(./*.sh*)",
      "Bash(./scripts/*)",
      "Bash(bash scripts/*)",
      "Bash(sh scripts/*)",
      "Bash(source scripts/*)",
      
      // ===== PIPING AND REDIRECTION =====
      "Bash(* | *)",
      "Bash(* > *)",
      "Bash(* >> *)",
      "Bash(* 2>&1*)",
      "Bash(* 2> *)",
      "Bash(* < *)",
      "Bash(* << *)",
      "Bash(* <<< *)",
      "Bash(* && *)",
      "Bash(* || *)",
      "Bash(* ; *)",
      
      // ===== SUDO COMMANDS (LIMITED) =====
      "Bash(sudo docker *)",
      "Bash(sudo systemctl *)",
      "Bash(sudo journalctl *)",
      "Bash(sudo service *)",
      "Bash(sudo bash -c *)",
      "Bash(sudo sh -c *)",
      
      // ===== SYSTEMCTL AND JOURNALCTL =====
      "Bash(systemctl *)",
      "Bash(systemctl status *)",
      "Bash(systemctl start *)",
      "Bash(systemctl stop *)",
      "Bash(systemctl restart *)",
      "Bash(journalctl *)",
      "Bash(journalctl -u *)",
      "Bash(journalctl -f*)",
      "Bash(journalctl --since *)",
      
      // ===== COMPRESSION & DATA PROCESSING =====
      "Bash(tar *)",
      "Bash(tar -czf *)",
      "Bash(tar -xzf *)",
      "Bash(tar -cjf *)",
      "Bash(tar -xjf *)",
      "Bash(tar -tvf *)",
      "Bash(tar --exclude=* *)",
      "Bash(gzip *)",
      "Bash(gzip -d *)",
      "Bash(gzip -9 *)",
      "Bash(gunzip *)",
      "Bash(zip *)",
      "Bash(zip -r *)",
      "Bash(zip -u *)",
      "Bash(zip -d *)",
      "Bash(unzip *)",
      "Bash(unzip -l *)",
      "Bash(unzip -o *)",
      "Bash(unzip -d * *)",
      "Bash(7z *)",
      "Bash(7z a *)",
      "Bash(7z x *)",
      "Bash(7z l *)",
      "Bash(bzip2 *)",
      "Bash(bunzip2 *)",
      "Bash(xz *)",
      "Bash(unxz *)",
      
      // ===== TEXT PROCESSING =====
      "Bash(tr *)",
      "Bash(fold *)",
      "Bash(column *)",
      "Bash(paste *)",
      "Bash(join *)",
      "Bash(split *)",
      "Bash(csplit *)",
      "Bash(tee *)",
      "Bash(xargs *)",
      
      // ===== MACROS AND SPECIAL =====
      "Bash(printf *)",
      "Bash(test *)",
      "Bash([ *)",
      "Bash([[ *)",
      "Bash(true*)",
      "Bash(false*)",
      "Bash(yes*)",
      "Bash(seq *)",
      "Bash(shuf *)",
      "Bash(bc *)",
      "Bash(expr *)",
      
      // ===== SPECIFIC COMMANDS FROM SESSION =====
      "Bash(open -a Docker*)",
      "Bash(open -a *)",
      "Bash(timeout *)",
      "Bash(time *)",
      "Bash(watch *)",
      
      // ===== DATABASE TOOLS =====
      // PostgreSQL
      "Bash(psql *)",
      "Bash(psql -h * -U * -d *)",
      "Bash(psql -c *)",
      "Bash(psql -f *)",
      "Bash(pg_dump *)",
      "Bash(pg_restore *)",
      "Bash(pg_dumpall*)",
      "Bash(createdb *)",
      "Bash(dropdb *)",
      "Bash(docker exec * psql *)",
      "Bash(docker exec * pg_dump *)",
      "Bash(docker exec * pg_restore *)",
      
      // MySQL
      "Bash(mysql *)",
      "Bash(mysql -u * -p*)",
      "Bash(mysql -e *)",
      "Bash(mysqldump *)",
      "Bash(mysqlimport *)",
      "Bash(mysqladmin *)",
      "Bash(docker exec * mysql *)",
      "Bash(docker exec * mysqldump *)",
      
      // MongoDB
      "Bash(mongo *)",
      "Bash(mongosh *)",
      "Bash(mongodump *)",
      "Bash(mongorestore *)",
      "Bash(mongoexport *)",
      "Bash(mongoimport *)",
      "Bash(mongod *)",
      "Bash(docker exec * mongo *)",
      "Bash(docker exec * mongosh *)",
      
      // SQLite
      "Bash(sqlite3 *)",
      "Bash(sqlite3 * .dump*)",
      "Bash(sqlite3 * < *)",
      "Bash(sqlite3 * '.tables'*)",
      "Bash(sqlite3 * '.schema'*)",
      
      // Redis
      "Bash(redis-cli *)",
      "Bash(redis-cli -h * -p *)",
      "Bash(redis-cli ping*)",
      "Bash(redis-cli info*)",
      "Bash(redis-cli monitor*)",
      "Bash(docker exec * redis-cli *)",
      
      // Environment variable generation
      "Bash(openssl rand -hex 32*)",
      "Bash(openssl rand -base64 *)",
      "Bash(uuidgen*)",
      "Bash(pwgen *)",
      
      // Certificate operations
      "Bash(openssl x509 -noout -text -in *)",
      "Bash(openssl x509 -noout -dates -in *)",
      "Bash(openssl x509 -noout -subject -in *)",
      "Bash(openssl verify *)",
      
      // Testing operations
      "Bash(npm test -- --coverage*)",
      "Bash(npm test -- --watch*)",
      "Bash(npm test -- --no-coverage*)",
      "Bash(jest *)",
      "Bash(npx jest *)",
      "Bash(npm run test:*)",
      
      // ===== DEVELOPMENT ENVIRONMENT TOOLS =====
      // Python operations
      "Bash(python *)",
      "Bash(python3 *)",
      "Bash(pip *)",
      "Bash(pip3 *)",
      "Bash(python -m *)",
      "Bash(python3 -m *)",
      
      // Version Managers
      "Bash(nvm *)",
      "Bash(nvm install *)",
      "Bash(nvm use *)",
      "Bash(nvm ls*)",
      "Bash(nvm alias *)",
      "Bash(nvm current*)",
      "Bash(pyenv *)",
      "Bash(pyenv install *)",
      "Bash(pyenv global *)",
      "Bash(pyenv local *)",
      "Bash(pyenv versions*)",
      "Bash(pyenv which *)",
      "Bash(rbenv *)",
      "Bash(rbenv install *)",
      "Bash(rbenv global *)",
      "Bash(rbenv local *)",
      "Bash(rbenv versions*)",
      "Bash(rbenv which *)",
      "Bash(rvm *)",
      "Bash(rvm install *)",
      "Bash(rvm use *)",
      "Bash(rvm list*)",
      "Bash(asdf *)",
      "Bash(asdf install *)",
      "Bash(asdf global *)",
      "Bash(asdf local *)",
      "Bash(asdf list*)",
      
      // Environment Management
      "Bash(direnv *)",
      "Bash(direnv allow*)",
      "Bash(direnv deny*)",
      "Bash(direnv status*)",
      "Bash(direnv reload*)",
      
      // Terminal Multiplexers
      "Bash(tmux *)",
      "Bash(tmux new*)",
      "Bash(tmux attach*)",
      "Bash(tmux ls*)",
      "Bash(tmux kill-session*)",
      "Bash(tmux send-keys *)",
      "Bash(tmux capture-pane*)",
      "Bash(screen *)",
      "Bash(screen -S *)",
      "Bash(screen -r *)",
      "Bash(screen -ls*)",
      "Bash(screen -X *)",
      
      // Port checking
      "Bash(lsof -i :*)",
      "Bash(sudo lsof -i :*)",
      "Bash(netstat -an | grep *)",
      "Bash(ss -an | grep *)",
      "Bash(nc -zv * *)",
      
      // Log viewing
      "Bash(tail -f logs/*)",
      "Bash(tail -f *.log*)",
      "Bash(grep -i error logs/*)",
      "Bash(grep -i warn logs/*)",
      "Bash(journalctl -xeu *)",
      
      // Memory and disk operations  
      "Bash(df -h*)",
      "Bash(du -sh *)",
      "Bash(du -h --max-depth=*)",
      "Bash(free -m*)",
      "Bash(free -h*)",
      
      // Docker volume operations
      "Bash(docker volume ls | grep *)",
      "Bash(docker volume inspect * | jq*)",
      "Bash(docker volume rm $(docker volume ls -q)*)",
      
      // Multiple service operations
      "Bash(for * in *; do *; done*)",
      "Bash(while *; do *; done*)",
      "Bash(if *; then *; fi*)",
      "Bash(case * in *) *;; esac*)",
      
      // Background operations
      "Bash(* &)",
      "Bash(nohup * &)",
      "Bash(* > /dev/null 2>&1 &)",
      "Bash(disown*)",
      
      // String manipulation
      "Bash(echo * | tr *)",
      "Bash(echo * | sed *)",
      "Bash(echo * | awk *)",
      "Bash(echo * | cut *)",
      "Bash(echo * | base64*)",
      "Bash(echo * | base64 -d*)",
      
      // HTTP tools
      "Bash(http-server *)",
      "Bash(python -m http.server *)",
      "Bash(python3 -m http.server *)",
      "Bash(npx http-server *)",
      
      // Make operations
      "Bash(make *)",
      "Bash(make clean*)",
      "Bash(make build*)",
      "Bash(make install*)",
      "Bash(make test*)",
      
      // Yarn operations
      "Bash(yarn *)",
      "Bash(yarn install*)",
      "Bash(yarn add *)",
      "Bash(yarn remove *)",
      "Bash(yarn run *)",
      "Bash(yarn test*)",
      "Bash(yarn build*)",
      
      // PNPM operations
      "Bash(pnpm *)",
      "Bash(pnpm install*)",
      "Bash(pnpm add *)",
      "Bash(pnpm run *)",
      
      // Environment file operations
      "Bash(cat .env*)",
      "Bash(grep * .env*)",
      "Bash(echo * >> .env*)",
      "Bash(cp .env.example .env*)",
      "Bash(cp .env .env.backup*)",
      
      // Docker network operations
      "Bash(docker network *)",
      "Bash(docker network ls*)",
      "Bash(docker network inspect *)",
      "Bash(docker network create *)",
      "Bash(docker network rm *)",
      
      // Service health checks
      "Bash(curl -f http://localhost:*/health*)",
      "Bash(curl -f http://localhost:*/api/health*)",
      "Bash(curl -f http://localhost:*/metrics*)",
      "Bash(wget -O- http://localhost:*/health*)",
      
      // Git operations with remote
      "Bash(git remote show origin*)",
      "Bash(git ls-remote *)",
      "Bash(git fetch --prune*)",
      "Bash(git gc*)",
      "Bash(git reflog*)",
      
      // SSH key operations
      "Bash(ssh-keygen *)",
      "Bash(ssh-add *)",
      "Bash(ssh-keyscan *)",
      "Bash(ssh-copy-id *)",
      
      // Timezone operations
      "Bash(timedatectl*)",
      "Bash(date -u*)",
      "Bash(TZ=* date*)",
      
      // Hash operations
      "Bash(md5sum *)",
      "Bash(sha1sum *)",
      "Bash(sha256sum *)",
      "Bash(sha512sum *)",
      "Bash(shasum *)",
      
      // Backup operations
      "Bash(tar -czf * *)",
      "Bash(tar -xzf *)",
      "Bash(tar -tvf *)",
      "Bash(zip -r * *)",
      "Bash(unzip -l *)",
      
      // Permission checks
      "Bash(stat *)",
      "Bash(getfacl *)",
      "Bash(file *)",
      "Bash(file -b *)",
      
      // Package info
      "Bash(npm ls *)",
      "Bash(npm info *)",
      "Bash(npm view *)",
      "Bash(npm outdated*)",
      
      // Process monitoring
      "Bash(pidof *)",
      "Bash(pstree *)",
      "Bash(lsof -p *)",
      "Bash(strace -p *)",
      
      // Cron operations
      "Bash(crontab -l*)",
      "Bash(crontab -e*)",
      "Bash(cat /etc/cron*)",
      
      // Service discovery
      "Bash(avahi-browse *)",
      "Bash(mdns-scan*)",
      
      // Performance monitoring
      "Bash(iotop*)",
      "Bash(iftop*)",
      "Bash(nethogs*)",
      "Bash(dstat*)",
      "Bash(vmstat*)",
      "Bash(iostat*)",
      
      // Text editors (view mode)
      "Bash(nano -v *)",
      "Bash(vim -R *)",
      "Bash(view *)",
      "Bash(less +F *)",
      
      // ===== FILE TOOLS =====
      "Read(**)",
      "Edit(**)",
      "MultiEdit(**)",
      "Write(**)",
      "Glob(**)",
      "Grep(**)",
      "LS(**)",
      
      // ===== NOTEBOOK TOOLS =====
      "NotebookRead(**)",
      "NotebookEdit(**)",
      
      // ===== WEB TOOLS =====
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:localhost)",
      "WebFetch(domain:127.0.0.1)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:n8n.io)",
      "WebFetch(domain:*.nextsteptek.com)",
      "WebFetch(domain:gmktec-k9)",
      "WebFetch(domain:api.openai.com)",
      "WebFetch(domain:api.anthropic.com)",
      "WebSearch(**)",
      
      // ===== CLOUD PROVIDER CLIs =====
      // AWS CLI
      "Bash(aws *)",
      "Bash(aws s3 *)",
      "Bash(aws ec2 *)",
      "Bash(aws lambda *)",
      "Bash(aws dynamodb *)",
      "Bash(aws rds *)",
      "Bash(aws iam *)",
      "Bash(aws cloudformation *)",
      "Bash(aws configure*)",
      "Bash(aws sts *)",
      "Bash(aws logs *)",
      "Bash(aws ecr *)",
      "Bash(aws ecs *)",
      "Bash(aws eks *)",
      
      // Google Cloud
      "Bash(gcloud *)",
      "Bash(gcloud auth *)",
      "Bash(gcloud config *)",
      "Bash(gcloud compute *)",
      "Bash(gcloud container *)",
      "Bash(gcloud app *)",
      "Bash(gcloud functions *)",
      "Bash(gcloud storage *)",
      "Bash(gcloud sql *)",
      "Bash(gcloud run *)",
      "Bash(gcloud projects *)",
      "Bash(gcloud services *)",
      "Bash(gsutil *)",
      
      // Azure CLI
      "Bash(az *)",
      "Bash(az login*)",
      "Bash(az account *)",
      "Bash(az group *)",
      "Bash(az vm *)",
      "Bash(az storage *)",
      "Bash(az webapp *)",
      "Bash(az functionapp *)",
      "Bash(az sql *)",
      "Bash(az aks *)",
      "Bash(az acr *)",
      "Bash(az keyvault *)",
      
      // Vercel
      "Bash(vercel *)",
      "Bash(vercel deploy*)",
      "Bash(vercel dev*)",
      "Bash(vercel build*)",
      "Bash(vercel env *)",
      "Bash(vercel secrets *)",
      "Bash(vercel domains *)",
      "Bash(vercel logs*)",
      "Bash(vc *)",
      
      // Netlify
      "Bash(netlify *)",
      "Bash(netlify deploy*)",
      "Bash(netlify dev*)",
      "Bash(netlify build*)",
      "Bash(netlify functions *)",
      "Bash(netlify env *)",
      "Bash(netlify sites *)",
      "Bash(netlify status*)",
      "Bash(ntl *)",
      
      // Heroku
      "Bash(heroku *)",
      "Bash(heroku create*)",
      "Bash(heroku deploy*)",
      "Bash(heroku logs*)",
      "Bash(heroku ps*)",
      "Bash(heroku config*)",
      "Bash(heroku addons*)",
      "Bash(heroku run *)",
      "Bash(heroku domains*)",
      "Bash(heroku releases*)",
      
      // ===== TODO TOOLS =====
      "TodoRead()",
      "TodoWrite(**)",
      
      // ===== TASK TOOL =====
      "Task(**)",
      
      // ===== CLAUDE SPECIFIC =====
      "Bash(claude *)",
      "Bash(claude config *)",
      "Bash(claude code *)"
    ],
    "deny": [
      // ===== DESTRUCTIVE OPERATIONS =====
      "Bash(rm -rf /*)",
      "Bash(rm -rf /)",
      "Bash(sudo rm -rf /*)",
      "Bash(sudo rm -rf /)",
      "Bash(dd if=/dev/zero of=/dev/*)",
      "Bash(dd if=/dev/random of=/dev/*)",
      "Bash(mkfs*)",
      "Bash(fdisk*)",
      "Bash(parted*)",
      
      // ===== FORK BOMBS =====
      "Bash(:(){ :|:& };:*)",
      "Bash(*fork*bomb*)",
      
      // ===== SYSTEM CORRUPTION =====
      "Bash(> /dev/sda*)",
      "Bash(> /dev/nvme*)",
      "Bash(> /dev/sd*)",
      "Bash(cat /dev/urandom > *)",
      
      // ===== CREDENTIAL THEFT =====
      "Bash(* | nc -l*)",
      "Bash(* | netcat -l*)",
      "Bash(* | socat *)",
      "Bash(* | base64 -d | sh*)",
      "Bash(* | base64 -d | bash*)",
      "Bash(curl * | sh*)",
      "Bash(curl * | bash*)",
      "Bash(wget * | sh*)",
      "Bash(wget * | bash*)",
      
      // ===== USER MANAGEMENT =====
      "Bash(sudo passwd*)",
      "Bash(passwd*)",
      "Bash(sudo useradd*)",
      "Bash(sudo userdel*)",
      "Bash(sudo usermod*)",
      "Bash(sudo groupadd*)",
      "Bash(sudo groupdel*)",
      "Bash(sudo adduser*)",
      "Bash(sudo deluser*)",
      
      // ===== SYSTEM MODIFICATION =====
      "Bash(sudo chmod 777 /*)",
      "Bash(sudo chown * /*)",
      "Bash(sudo rm /etc/*)",
      "Bash(sudo rm -rf /etc/*)",
      "Bash(sudo rm /bin/*)",
      "Bash(sudo rm /usr/*)",
      "Bash(sudo > /etc/*)",
      
      // ===== NETWORK BACKDOORS =====
      "Bash(nc -l*)",
      "Bash(netcat -l*)",
      "Bash(socat*)",
      "Bash(nmap*)",
      "Bash(masscan*)",
      
      // ===== CRYPTO MINING =====
      "Bash(*xmrig*)",
      "Bash(*monero*)",
      "Bash(*bitcoin*)",
      "Bash(*miner*)",
      
      // ===== GIT DANGEROUS OPS =====
      "Bash(git push --force origin master*)",
      "Bash(git push --force origin main*)",
      "Bash(git push -f origin master*)",
      "Bash(git push -f origin main*)",
      "Bash(git reset --hard origin/master*)",
      "Bash(git reset --hard origin/main*)",
      
      // ===== AWS/CLOUD CREDENTIAL ACCESS =====
      "Bash(cat ~/.aws/*)",
      "Bash(cat ~/.ssh/id_*)",
      "Bash(cat /root/.ssh/*)",
      
      // ===== ENVIRONMENT VARIABLE DUMPS =====
      "Bash(env | base64*)",
      "Bash(printenv | base64*)",
      "Bash(set | base64*)",
      
      // ===== REVERSE SHELLS =====
      "Bash(bash -i >& /dev/tcp/*)",
      "Bash(sh -i >& /dev/tcp/*)",
      "Bash(python -c 'import socket*)",
      "Bash(php -r '$sock*)",
      "Bash(ruby -rsocket*)",
      "Bash(perl -e 'use Socket*)",
      
      // ===== DANGEROUS DOCKER OPERATIONS =====
      "Bash(docker run --privileged *)",
      "Bash(docker run --pid=host *)",
      "Bash(docker run --net=host *)",
      "Bash(docker run -v /:/host *)",
      "Bash(docker run -v /etc:/etc *)",
      "Bash(docker run -v /var/run/docker.sock:/var/run/docker.sock *)",
      
      // ===== CREDENTIAL EXPOSURE =====
      "Bash(history | grep -i password*)",
      "Bash(history | grep -i token*)",
      "Bash(history | grep -i secret*)",
      "Bash(history | grep -i key*)",
      "Bash(grep -r password /etc/*)",
      "Bash(grep -r token /etc/*)",
      "Bash(find / -name id_rsa*)",
      "Bash(find / -name *.key*)",
      "Bash(find / -name *.pem*)",
      
      // ===== SYSTEM SHUTDOWN =====
      "Bash(shutdown*)",
      "Bash(reboot*)",
      "Bash(halt*)",
      "Bash(poweroff*)",
      "Bash(init 0*)",
      "Bash(init 6*)",
      "Bash(sudo shutdown*)",
      "Bash(sudo reboot*)",
      
      // ===== FIREWALL DISABLING =====
      "Bash(sudo ufw disable*)",
      "Bash(sudo iptables -F*)",
      "Bash(sudo iptables --flush*)",
      "Bash(sudo systemctl stop firewalld*)",
      "Bash(sudo service iptables stop*)",
      
      // ===== MALICIOUS DOWNLOADS =====
      "Bash(curl * | sudo *)",
      "Bash(wget * | sudo *)",
      "Bash(curl -s * | sh*)",
      "Bash(wget -qO- * | sh*)",
      
      // ===== LOG DELETION =====
      "Bash(rm /var/log/*)",
      "Bash(rm -rf /var/log/*)",
      "Bash(> /var/log/*)",
      "Bash(echo > /var/log/*)",
      "Bash(truncate -s 0 /var/log/*)",
      
      // ===== PACKAGE MANAGER ABUSE =====
      "Bash(npm install -g * --unsafe-perm*)",
      "Bash(pip install * --break-system-packages*)",
      "Bash(gem install * --no-user-install*)",
      
      // ===== KERNEL MODIFICATIONS =====
      "Bash(insmod *)",
      "Bash(rmmod *)",
      "Bash(modprobe *)",
      "Bash(sysctl -w *)",
      
      // ===== DANGEROUS FILE OPERATIONS =====
      "Bash(chmod -R 777 /*)",
      "Bash(chmod 777 /etc/*)",
      "Bash(chmod 777 /bin/*)",
      "Bash(chmod 777 /usr/*)",
      "Bash(chown -R * /*)",
      
      // ===== BITCOIN/CRYPTO OPERATIONS =====
      "Bash(*bitcoin-cli*)",
      "Bash(*ethereum*)",
      "Bash(*wallet.dat*)",
      "Bash(*privatekey*)",
      
      // ===== MASS DELETION =====
      "Bash(find / -type f -delete*)",
      "Bash(find / -type d -delete*)",
      "Bash(rm -rf /home/*)",
      "Bash(rm -rf /var/*)",
      "Bash(rm -rf /opt/*)",
      
      // ===== PROCESS INJECTION =====
      "Bash(gdb -p *)",
      "Bash(ptrace *)",
      "Bash(LD_PRELOAD=*)",
      
      // ===== SUDO BYPASS ATTEMPTS =====
      "Bash(sudo -l*)",
      "Bash(sudo -V*)",
      "Bash(sudo su*)",
      "Bash(sudo su -*)",
      "Bash(sudo -i*)",
      "Bash(pkexec *)",
      
      // ===== DANGEROUS ENV EXPORTS =====
      "Bash(export PATH=*)",
      "Bash(export LD_LIBRARY_PATH=*)",
      "Bash(export PYTHONPATH=*)",
      
      // ===== CONTAINER ESCAPE ATTEMPTS =====
      "Bash(nsenter *)",
      "Bash(docker run --cap-add=ALL *)",
      "Bash(docker run --security-opt *)",
      
      // ===== DANGEROUS SYSTEMD OPERATIONS =====
      "Bash(systemctl mask *)",
      "Bash(systemctl disable *)",
      "Bash(systemctl daemon-reload*)",
      
      // ===== CLOUD METADATA ACCESS =====
      "Bash(curl http://169.254.169.254/*)",
      "Bash(wget http://169.254.169.254/*)",
      "Bash(curl http://metadata.google.internal/*)",
      
      // ===== DANGEROUS REDIRECTS =====
      "Bash(exec < /dev/tcp/*)",
      "Bash(exec > /dev/tcp/*)",
      "Bash(exec 3<>/dev/tcp/*)"
    ]
  }
}